using Model;
using NishBox;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO.MemoryMappedFiles;
using System.Linq;
using System.Security.Permissions;
using System.ServiceModel;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using WcfInterface;

namespace WindowsSleepAssist
{
    public partial class SleepAssistMain : Form
    {
        #region Fields

        private SleepAssistData sleepAssistData;

        //private SleepAssist sleepAssist;
        private SharedMemory m_sharedMem;

        #endregion Fields

        #region Constructors

        public SleepAssistMain()
        {
            //sleepAssist = new SleepAssist();
            //sleepAssist.NetworkSpeedUpdated += sleepAssist_NetworkSpeedUpdated;
            InitializeComponent();
            startTimer();
        }

        private void startTimer()
        {
            Timer timer = new Timer();
            timer.Interval = 1000;
            timer.Tick += timer_Tick;
            timer.Start();

            Timer countDownTimer = new Timer();
            countDownTimer.Interval = 1000;
            countDownTimer.Tick += countDownTimer_Tick;
            countDownTimer.Start();
        }

        private void countDownTimer_Tick(object sender, EventArgs e)
        {
            //if (sleepAssistData != null && sleepAssistData.timeGoingToSleep != null)
            //{
            //    TimeSpan timeSpan = sleepAssistData.timeGoingToSleep.Subtract(DateTime.Now);
            //    string minutes = timeSpan.Minutes.ToString();
            //    string seconds = timeSpan.Seconds.ToString();
            //    lblSleepTimerValue.Text = (minutes + ":" + seconds);
            //}

            //if (UserInputMonitor.GetIdleTime() < 1000)
            //{
            //    readFromSharedMemory();
            //    sleepAssistData.lastUserActivityTime = DateTime.Now.AddTicks(-UserInputMonitor.GetLastInputTime());
            //    writeToSharedMemory();
            //}
        }

        private void timer_Tick(object sender, EventArgs e)
        {
            readFromSharedMemory();
            if (sleepAssistData != null && sleepAssistData.timeGoingToSleep != null)
            {
                TimeSpan timeSpan = sleepAssistData.timeGoingToSleep.Subtract(DateTime.Now);
                string minutes = timeSpan.Minutes.ToString();
                string seconds = timeSpan.Seconds.ToString();
                lblSleepTimerValue.Text = (minutes + ":" + seconds);
            }

            if (UserInputMonitor.GetIdleTime() < 1000)
            {
                sleepAssistData.lastUserActivityTime = DateTime.Now.AddTicks(-UserInputMonitor.GetLastInputTime());
                writeToSharedMemory();
            }

            lblInboundTraffic.Text = BytesToString(sleepAssistData.trafficIn);
            lblOutboundTraffic.Text = BytesToString(sleepAssistData.trafficOut);
            displayPowerCfgRequests();
            lblLastWakeTriggerValue.Text = sleepAssistData.lastWakeTrigger;
        }

        private void displayPowerCfgRequests()
        {
            requestsPanel.Controls.Add(getMultilineListBoxFromList(sleepAssistData.powerRequests.DisplayRequests));
            requestsPanel.Controls.Add(getMultilineListBoxFromList(sleepAssistData.powerRequests.SystemRequests));
            requestsPanel.Controls.Add(getMultilineListBoxFromList(sleepAssistData.powerRequests.AwayModeRequests));
            requestsPanel.Controls.Add(getMultilineListBoxFromList(sleepAssistData.powerRequests.ExecutionRequests));
            requestsPanel.Controls.Add(getMultilineListBoxFromList(sleepAssistData.powerRequests.PerfBoostRequests));
        }

        private MultiLineListBox getMultilineListBoxFromList(List<string> list)
        {
            MultiLineListBox multiLineListBox = new MultiLineListBox();
            multiLineListBox.DataSource = list;
            return multiLineListBox;
        }

        private void writeToSharedMemory()
        {
            m_sharedMem = new SharedMemory(@"Global\wsa_trafficIn");
            m_sharedMem.WriteObjectToMMF(@"Global\wsa_trafficIn", sleepAssistData, false);
        }

        private void readFromSharedMemory()
        {
            m_sharedMem = new SharedMemory(@"Global\wsa_trafficIn");
            sleepAssistData = (SleepAssistData)m_sharedMem.ReadObjectFromMMF(@"Global\wsa_trafficIn");
        }

        #endregion Constructors

        #region Methods

        private String BytesToString(long byteCount)
        {
            string[] suf = { "B", "KB", "MB", "GB", "TB", "PB", "EB" }; //Longs run out around EB
            if (byteCount == 0)
                return "0" + suf[0];
            long bytes = Math.Abs(byteCount);
            int place = Convert.ToInt32(Math.Floor(Math.Log(bytes, 1024)));
            double num = Math.Round(bytes / Math.Pow(1024, place), 1);
            return (Math.Sign(byteCount) * num).ToString() + suf[place];
        }

        private void sleepAssist_NetworkSpeedUpdated(object sender, NetworkSpeedEventArgs e)
        {
            //lblInboundTraffic.Invoke(new MethodInvoker( lblInboundTraffic.Text = BytesToString(e.inboundSpeed); }));
            //lblOutboundTraffic.Invoke(new MethodInvoker(delegate { lblOutboundTraffic.Text = BytesToString(e.outboundSpeed).ToString(); }));
        }

        private void SleepAssistMain_Load(object sender, EventArgs e)
        {
            updateUI();
        }

        private void updateUI()
        {
            // lblPowercfgOutput.Text = sleepAssist.getPowerCfgRequests();
        }

        #endregion Methods

        //void ISleepAssistClient.setTrafficIn(long trafficIn)
        //{
        //    lblInboundTraffic.Invoke(new MethodInvoker(delegate { lblInboundTraffic.Text = BytesToString(trafficIn).ToString(); }));
        //}

        //void ISleepAssistClient.setTrafficOut(long trafficOut)
        //{
        //    lblOutboundTraffic.Invoke(new MethodInvoker(delegate { lblOutboundTraffic.Text = BytesToString(trafficOut).ToString(); }));
        //}
    }
}